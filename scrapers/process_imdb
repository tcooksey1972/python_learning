import sys
print(sys.executable)

import json
from collections import defaultdict
import math
from sklearn.preprocessing import StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer

# 1. Data Loading
with open('preprocessed_movies.json', 'r') as f:
    movies = json.load(f)

# 4. Feature Extraction

# In this case, the relevant numeric and text features have already been identified in your preprocessing script. 
# However, for clarity, we'll list them:
numeric_features = ['rating', 'votes', 'year', 'director_popularity', 'popularity_score']
text_features = ['title', 'director', 'actors']

# 5. Feature Engineering

# Age of the movie
current_year = 2023  # Assuming current year as 2023
for movie in movies:
    if movie['year']:
        movie['movie_age'] = current_year - movie['year']
    else:
        movie['movie_age'] = None

# Is star director?
# Assuming you've already done 'has_star_actor' feature. 
# Adding a 'is_star_director' feature. You can customize the list of star directors.
star_directors = ["Christopher Nolan", "Martin Scorsese", "Quentin Tarantino"]
for movie in movies:
    movie['is_star_director'] = movie['director'] in star_directors

print("\n--- Movies after Feature Engineering ---\n")
for movie in movies:
    print(f"Title: {movie['title']}")
    print(f"Movie Age: {movie['movie_age']}")
    print(f"Is Star Director: {movie['is_star_director']}\n")

# 6. Normalization & Standardization
scaler = StandardScaler()
movies_standardized = scaler.fit_transform([[movie[feature] for feature in numeric_features] for movie in movies if movie['year']])  # exclude movies without a release year

# Applying the transformations back to our movie dataset
for i, movie in enumerate([movie for movie in movies if movie['year']]):
    for j, feature in enumerate(numeric_features):
        movie[f"{feature}_standardized"] = movies_standardized[i][j]

print("\n--- Movies after Normalization & Standardization ---\n")
for movie in movies:
    print(f"Title: {movie['title']}")
    for feature in numeric_features:
        print(f"{feature} (Standardized): {movie.get(f'{feature}_standardized', 'N/A')}")
    print("\n")

# 7. Text Preprocessing

# For the sake of this example, let's use TF-IDF Vectorization on movie titles. 
# In a real-world scenario, you might also want to preprocess descriptions or other lengthy textual features.
tfidf = TfidfVectorizer(stop_words='english', max_features=5000)  # Limiting to 5000 most frequent words
tfidf_matrix = tfidf.fit_transform([movie['title'] for movie in movies])
tfidf_feature_names = tfidf.get_feature_names_out()

# We won't append the TF-IDF matrix back to the movie dataset since it's high-dimensional.
# But it's available for any further machine learning tasks.

print("\n--- Top TF-IDF Features for Movie Titles ---\n")
print(tfidf_feature_names[:50])  # Printing the first 50 for brevity

# Save the processed data back to a new JSON file
with open('processed_movies.json', 'w', encoding='utf-8') as jsonfile:
    json.dump(movies, jsonfile, ensure_ascii=False, indent=4)
